name: Anchore Enterprise Centralized Scan

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'On-Demand Build'

env:
  # The base URL for all anchorectl commands.
  # Anchorectl typically handles appending the API version (e.g., /v2/) internally.
  ANCHORECTL_URL: https://anchore.nizati.com/ # This needs to be the actual base URL of your Anchore Enterprise
  # The explicit URL to download the anchorectl binary from your Enterprise instance.
  # This includes the /v2/ segment because it's a direct download endpoint.
  ANCHORECTL_DOWNLOAD_URL: https://anchore.nizati.com/v2/system/anchorectl?operating_system=linux&architecture=amd64
  ANCHORECTL_USERNAME: ${{ vars.ANCHORECTL_USERNAME }}
  ANCHORECTL_PASSWORD: ${{ secrets.ANCHORECTL_PASSWORD }}
  ## set ANCHORECTL_FAIL_BASED_ON_RESULTS to true if you want to break the pipeline based on the evaluation
  ANCHORECTL_FAIL_BASED_ON_RESULTS: false
  REGISTRY: ghcr.io

jobs:

  Build:
    runs-on: ubuntu-latest
    steps:

    - name: "Set IMAGE environmental variables"
      run: |
        # Sets the IMAGE environment variable for the current job,
        # constructing the full image name including registry, repository, and branch/tag.
        echo "IMAGE=${{ env.REGISTRY }}/${{ github.repository }}:${{ github.ref_name }}" >> $GITHUB_ENV

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: build local container
      uses: docker/build-push-action@v3
      with:
        # Uses the IMAGE environment variable set earlier for tagging.
        tags: ${{ env.IMAGE }}
        push: true
        # 'load: false' means the image is not loaded into the local Docker daemon,
        # which is fine as it's pushed to the registry.
        load: false

  Anchore:
    runs-on: ubuntu-latest
    needs: Build

    steps:

    - name: "Set IMAGE environmental variables"
      run: |
        # Sets the IMAGE environment variable for the current job,
        # ensuring it's available for subsequent AnchoreCTL commands.
        echo "IMAGE=${{ env.REGISTRY }}/${{ github.repository }}:${{ github.ref_name }}" >> $GITHUB_ENV

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install anchorectl from Anchore Enterprise
      run: |
        # Download and extract anchorectl binary directly from the specified download URL
        # provided by the Anchore Enterprise instance.
        # The 'curl' command fetches the gzipped tarball, and 'tar -zx anchorectl' extracts
        # the 'anchorectl' executable from it.
        curl -sSfL -X GET "${{ env.ANCHORECTL_DOWNLOAD_URL }}" \
        -H "accept: */*" \
        | tar -zx anchorectl

        # Make the extracted binary executable.
        chmod +x anchorectl

        # Move the binary to a directory that is typically in the system's PATH
        # (e.g., /usr/local/bin). This allows 'anchorectl' commands to be run
        # directly without specifying their full path.
        sudo mv anchorectl /usr/local/bin/anchorectl

        # Verify the installation by checking its location and displaying its version.
        echo "Verifying anchorectl installation:"
        which anchorectl
        anchorectl --version

    - name: Queue Image for Scanning by Anchore Enterprise
      run: |
        # Adds the built container image to Anchore Enterprise for scanning.
        # '--no-auto-subscribe' prevents automatic subscription to policies.
        # '--wait' ensures the command waits for the image analysis to complete.
        # '--dockerfile ./Dockerfile' specifies the Dockerfile used for building,
        # which helps Anchore understand the image context.
        # The IMAGE environment variable holds the full image reference.
        anchorectl image add --no-auto-subscribe --wait --dockerfile ./Dockerfile ${IMAGE}

    - name: Pull Vulnerability List
      run: |
        # Retrieves and displays the vulnerability list for the scanned image.
        anchorectl image vulnerabilities ${IMAGE}

    - name: Pull Policy Evaluation
      run: |
        # Evaluates the scanned image against defined Anchore policies.
        # '--detail' provides a verbose output of the policy evaluation.
        #
        # set "ANCHORECTL_FAIL_BASED_ON_RESULTS=true" (see above in the "env:" section) to break the pipeline here if the
        # policy evaluation returns FAIL or add -f, --fail-based-on-results to this command for the same result
        #
        anchorectl image check --detail ${IMAGE}
